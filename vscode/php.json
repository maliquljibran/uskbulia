


{
  "homect": {
    "prefix": [
      "homect"
    ],
    "body": [
      "<?php",
      "namespace App\\\\Http\\\\Controllers;",
      "",
      "use App\\\\Models\\\\Dompet;",
      "use Illuminate\\\\Http\\\\Request;",
      "use App\\\\Models\\\\User;",
      "use Illuminate\\\\Support\\\\Facades\\\\Auth;",
      "",
      "class HomeController extends Controller",
      "{",
      "    public function index(Request \\$request)",
      "    {",
      "        \\$user = Auth::user();",
      "        \\$filter = \\$request->query('filter');",
      "",
      "        \\$filterMutasi = function (\\$query) use (\\$filter) {",
      "            if (\\$filter == 'topup') {",
      "                \\$query->where('description', 'like', '%Top-up%');",
      "            } elseif (\\$filter == 'withdraw') {",
      "                \\$query->where('description', 'like', '%Withdraw%');",
      "            } elseif (\\$filter == 'transfer') {",
      "                \\$query->where('description', 'like', '%Transfer%');",
      "            }",
      "",
      "            ",
      "            if (\\$filter == 'done') {",
      "                \\$query->where('status', 'done');",
      "            } elseif (\\$filter == 'process') {",
      "                \\$query->where('status', 'process');",
      "            } elseif (\\$filter == 'rejected') {",
      "                \\$query->where('status', 'reject');",
      "            }",
      "",
      "            return \\$query;",
      "        };",
      "",
      "",
      "        ",
      "        if (\\$user->role == 'admin') {",
      "            \\$users = User::all();",
      "",
      "            \\$mutasiQuery = Dompet::where('status', 'done');",
      "            \\$mutasi = \\$filterMutasi(\\$mutasiQuery)->orderBy('created_at', 'desc')->get();",
      "",
      "            return view('home', compact('users', 'mutasi'));",
      "        }",
      "",
      "       ",
      "        if (\\$user->role == 'bank') {",
      "            \\$dompet = Dompet::where('status', 'done')->get();",
      "            \\$credit = \\$dompet->sum('credit');",
      "            \\$debit  = \\$dompet->sum('debit');",
      "            \\$saldo = \\$credit - \\$debit;",
      "",
      "            \\$users = User::where('role', 'siswa')->get();",
      "            \\$request_payment = Dompet::where('status', 'process')->orderBy('created_at', 'DESC')->get();",
      "",
      "            \\$mutasiQuery = Dompet::where('status', 'done');",
      "            \\$mutasi = \\$filterMutasi(\\$mutasiQuery)->orderBy('created_at', 'DESC')->get();",
      "",
      "            \\$allMutasi = Dompet::where('status', 'done')->count();",
      "",
      "            return view('home', compact('saldo', 'users', 'request_payment', 'mutasi', 'allMutasi'));",
      "        }",
      "",
      "        if (\\$user->role == 'siswa') {",
      "           ",
      "            \\$dompets = Dompet::where('user_id', \\$user->id)->where('status', 'done')->get();",
      "            \\$credit = \\$dompets->sum('credit');",
      "            \\$debit  = \\$dompets->sum('debit');",
      "            \\$saldo = \\$credit - \\$debit;",
      "",
      "            ",
      "            \\$mutasiQuery = Dompet::where('user_id', \\$user->id)->whereIn('status', ['done', 'process', 'rejected']);",
      "            \\$mutasi = \\$filterMutasi(\\$mutasiQuery)->orderBy('created_at', 'desc')->get();",
      "",
      "",
      "            ",
      "            \\$users = User::where('role', 'siswa')->where('id', '!=', \\$user->id)->get();",
      "",
      "            ",
      "            return view('home', compact('saldo', 'mutasi', 'users'));",
      "        }",
      "",
      "",
      "        return redirect()->route('home');",
      "    }",
      "",
      "    ",
      "}",
      ""
    ],
    "description": "homect"
  },
  "dompetct": {
    "prefix": [
      "dompetct"
    ],
    "body": [
      "<?php",
      "",
      "namespace App\\\\Http\\\\Controllers;",
      "",
      "use App\\\\Models\\\\Dompet;",
      "use Illuminate\\\\Http\\\\Request;",
      "use App\\\\Models\\\\User;",
      "use Illuminate\\\\Support\\\\Facades\\\\Auth;",
      "use Barryvdh\\\\DomPDF\\\\Facade\\\\Pdf;",
      "use Illuminate\\\\Support\\\\Facades\\\\DB;",
      "",
      "class DompetController extends Controller",
      "{",
      "    public function __construct()",
      "    {",
      "        \\$this->middleware('role:admin,bank')->only('allMutasi');",
      "    }",
      "",
      "    public function topup(Request \\$request)",
      "    {",
      "        \\$request->validate([",
      "            'credit' => 'required|numeric|min:10000'",
      "        ]);",
      "",
      "        Dompet::create([",
      "            'user_id' => Auth::id(),",
      "            'debit' => 0,",
      "            'credit' => \\$request->credit,",
      "            'description' => 'Top-up',",
      "            'status' => 'process'",
      "        ]);",
      "",
      "        return redirect()->back()->with('status', 'Permintaan Top-Up anda sedang diproses');",
      "    }",
      "",
      "    public function withdraw(Request \\$request)",
      "    {",
      "        \\$request->validate([",
      "            'credit' => 'required|numeric|min:10000'",
      "        ]);",
      "",
      "        \\$user = Auth::user();",
      "        \\$totalSaldo = Dompet::where('user_id', \\$user->id)",
      "            ->where('status', 'done')",
      "            ->sum(DB::raw('credit - debit'));",
      "",
      "        // Check if balance is zero",
      "        if (\\$totalSaldo == 0) {",
      "            return redirect()->back()->with('error', 'Saldo Anda nol, tidak dapat melakukan Tarik Tunai.');",
      "        }",
      "",
      "        // Check if balance is sufficient",
      "        if (\\$totalSaldo < \\$request->credit) {",
      "            return redirect()->back()->with('error', 'Saldo anda tidak mencukupi.');",
      "        }",
      "",
      "        Dompet::create([",
      "            'user_id' => \\$user->id,",
      "            'debit' => \\$request->credit,",
      "            'credit' => 0,",
      "            'description' => 'Tarik Tunai',",
      "            'status' => 'process',",
      "        ]);",
      "",
      "        return redirect()->back()->with('status', 'Tarik Tunai sedang diproses');",
      "    }",
      "",
      "    public function bankTopupToSiswa(Request \\$request)",
      "    {",
      "        \\$request->validate([",
      "            'siswa_id' => 'required|exists:users,id',",
      "            'amount' => 'required|numeric|min:10000',",
      "        ]);",
      "",
      "        Dompet::create([",
      "            'user_id' => \\$request->siswa_id,",
      "            'credit' => \\$request->amount,",
      "            'debit' => 0,",
      "            'description' => 'Top-up oleh Bank',",
      "            'status' => 'done'",
      "        ]);",
      "",
      "        return redirect()->back()->with('success', 'Top-up berhasil dilakukan ke siswa.');",
      "    }",
      "",
      "    public function bankWithdrawFromSiswa(Request \\$request)",
      "    {",
      "        \\$request->validate([",
      "            'siswa_id' => 'required|exists:users,id',",
      "            'amount' => 'required|numeric|min:10000',",
      "        ]);",
      "",
      "        \\$totalSaldo = Dompet::where('user_id', \\$request->siswa_id)",
      "            ->where('status', 'done')",
      "            ->sum(DB::raw('credit - debit'));",
      "",
      "        // Check if balance is zero",
      "        if (\\$totalSaldo == 0) {",
      "            return redirect()->back()->with('error', 'Saldo siswa nol, tidak dapat melakukan Tarik Tunai.');",
      "        }",
      "",
      "        // Check if balance is sufficient (allow balance to become zero)",
      "        if (\\$totalSaldo < \\$request->amount) {",
      "            return redirect()->back()->with('error', 'Saldo siswa tidak mencukupi.');",
      "        }",
      "",
      "        Dompet::create([",
      "            'user_id' => \\$request->siswa_id,",
      "            'credit' => 0,",
      "            'debit' => \\$request->amount,",
      "            'description' => 'Withdraw oleh Bank',",
      "            'status' => 'done'",
      "        ]);",
      "",
      "        return redirect()->back()->with('success', 'Tarik Tunai berhasil dilakukan untuk siswa.');",
      "    }",
      "",
      "    public function transfer(Request \\$request)",
      "    {",
      "        \\$request->validate([",
      "            'recepient_id' => 'required|exists:users,id',",
      "            'amount' => 'required|numeric|min:1',",
      "        ]);",
      "",
      "        \\$sender = Auth::user();",
      "        \\$recepient = User::find(\\$request->recepient_id);",
      "",
      "        // Prevent transfer to self",
      "        if (\\$sender->id == \\$request->recepient_id) {",
      "            return redirect()->back()->with('error', 'Anda tidak dapat mentransfer ke akun sendiri.');",
      "        }",
      "",
      "        \\$saldo = Dompet::where('user_id', \\$sender->id)",
      "            ->where('status', 'done')",
      "            ->sum(DB::raw('credit - debit'));",
      "",
      "        // Check if balance is zero",
      "        if (\\$saldo == 0) {",
      "            return redirect()->back()->with('error', 'Saldo Anda nol, tidak dapat melakukan transfer.');",
      "        }",
      "",
      "        // Check if balance is sufficient",
      "        if (\\$saldo < \\$request->amount) {",
      "            return redirect()->back()->with('error', 'Saldo pengirim tidak mencukupi.');",
      "        }",
      "",
      "        Dompet::create([",
      "            'user_id' => \\$sender->id,",
      "            'credit' => 0,",
      "            'debit' => \\$request->amount,",
      "            'description' => 'Transfer ke ' . \\$recepient->name,",
      "            'status' => 'done',",
      "        ]);",
      "",
      "        Dompet::create([",
      "            'user_id' => \\$recepient->id,",
      "            'credit' => \\$request->amount,",
      "            'debit' => 0,",
      "            'description' => 'Transfer dari ' . \\$sender->name,",
      "            'status' => 'done',",
      "        ]);",
      "",
      "        return redirect()->back()->with('success', 'Transfer berhasil.');",
      "    }",
      "",
      "    public function acceptRequest(Request \\$request, \\$dompetId)",
      "    {",
      "        \\$dompet = Dompet::findOrFail(\\$dompetId);",
      "",
      "        // Only process withdrawals (Top-up requests don't need balance checks)",
      "        if (\\$dompet->description === 'Withdraw Saldo') {",
      "            \\$totalSaldo = Dompet::where('user_id', \\$dompet->user_id)",
      "                ->where('status', 'done')",
      "                ->sum(DB::raw('credit - debit'));",
      "",
      "            // Check if balance is zero",
      "            if (\\$totalSaldo == 0) {",
      "                \\$dompet->update(['status' => 'rejected']);",
      "                return redirect()->back()->with('error', 'Permintaan ditolak karena saldo siswa 0.');",
      "            }",
      "",
      "            // Check if balance is sufficient (allow balance to become zero)",
      "            if (\\$totalSaldo < \\$dompet->debit) {",
      "                \\$dompet->update(['status' => 'rejected']);",
      "                return redirect()->back()->with('error', 'Permintaan ditolak karena saldo siswa tidak mencukupi.');",
      "            }",
      "        }",
      "",
      "        \\$dompet->update(['status' => 'done']);",
      "",
      "        return redirect()->back()->with('status', 'Permintaan Berhasil disetujui');",
      "    }",
      "",
      "    public function rejectRequest(Request \\$request, \\$dompetId)",
      "    {",
      "        \\$dompet = Dompet::findOrFail(\\$dompetId);",
      "        \\$dompet->status = 'rejected';",
      "        \\$dompet->save();",
      "",
      "        return redirect()->back()->with('status', 'Permintaan Ditolak');",
      "    }",
      "",
      "    public function allMutasi()",
      "    {",
      "        \\$mutasi = Dompet::with('user')",
      "            ->orderBy('created_at', 'desc')",
      "            ->paginate(10);",
      "",
      "        return view('wallet.all', compact('mutasi'));",
      "    }",
      "",
      "    public function mutasi()",
      "    {",
      "        \\$user = Auth::user();",
      "        \\$mutasi = Dompet::where('user_id', \\$user->id)",
      "            ->orderBy('created_at', 'desc')",
      "            ->paginate(10);",
      "",
      "        return view('siswa.mutasi', compact('mutasi'));",
      "    }",
      "",
      "    public function all(Request \\$request)",
      "    {",
      "        \\$filter = \\$request->input('filter');",
      "",
      "        \\$query = Dompet::with('user');",
      "",
      "        if (\\$filter === 'topup') {",
      "            \\$query->where('description', 'Top-up');",
      "        } elseif (\\$filter === 'withdraw') {",
      "            \\$query->where('description', 'Withdraw');",
      "        } elseif (\\$filter === 'transfer') {",
      "            \\$query->where('description', 'Transfer');",
      "        } elseif (\\$filter === 'rejected') {",
      "            \\$query->where('status', 'rejected');",
      "        }",
      "",
      "        if (\\$filter === 'all' || !\\$filter) {",
      "            // No additional filtering",
      "        }",
      "",
      "        \\$mutasi = \\$query->orderBy('created_at', 'desc')->get();",
      "",
      "        return view('wallet.all', compact('mutasi'));",
      "    }",
      "",
      "    public function exportPDF(Request \\$request, \\$userId = null)",
      "    {",
      "        \\$user = Auth::user();",
      "",
      "        if (\\$user->role === 'siswa') {",
      "            \\$mutasi = Dompet::with('user')->where('user_id', \\$user->id)->get();",
      "        } else {",
      "            \\$mutasi = Dompet::with('user')->get();",
      "        }",
      "",
      "        \\$pdf = Pdf::loadView('riwayat-transaksi', compact('mutasi'));",
      "        return \\$pdf->download('riwayat_transaksi.pdf');",
      "    }",
      "}"
    ],
    "description": "dompetct"
  },
  "usercto": {
    "prefix": [
      "usercto"
    ],
    "body": [
      "<?php",
      "",
      "namespace App\\Http\\Controllers;",
      "",
      "use App\\Models\\User;",
      "use App\\Models\\Dompet;",
      "use Illuminate\\Http\\Request;",
      "use Illuminate\\Support\\Facades\\DB;",
      "use Illuminate\\Support\\Facades\\Hash;",
      "use Illuminate\\Support\\Facades\\Auth;",
      "",
      "class UserController extends Controller",
      "{",
      "    public function create()",
      "    {",
      "        return view('admin.add-user');",
      "    }",
      "",
      "    public function getUserInfo(\\$id)",
      "{",
      "    \\$user = User::find(\\$id);",
      "",
      "    if (!\\$user) {",
      "        return response()->json(['exists' => false]);",
      "    }",
      "    ",
      "    if (\\$user->role === 'admin' || \\$user->role === 'bank') {",
      "        return response()->json(['exists' => false, 'message' => 'User role not allowed']);",
      "    }",
      "",
      "    \\$saldo = Dompet::where('user_id', \\$user->id)",
      "        ->where('status', 'done')",
      "        ->select(DB::raw('SUM(credit - debit) as saldo'))",
      "        ->value('saldo') ?? 0;",
      "",
      "    return response()->json([",
      "        'exists' => true,",
      "        'name' => \\$user->name,",
      "        'role' => \\$user->role,",
      "        'saldo' => \\$saldo",
      "    ]);",
      "}",
      "",
      "    public function store(Request \\$request)",
      "    {",
      "        \\$request->validate([",
      "            'name' => 'required|string|max:100',",
      "            'email' => 'required|email|unique:users,email',",
      "            'password' => 'required|confirmed|min:6',",
      "            'role' => 'required|in:siswa,admin,bank',",
      "        ]);",
      "",
      "        ",
      "        if (Auth::user()->role === 'bank' && \\$request->role !== 'siswa') {",
      "            return redirect()->back()->with('status', 'Bank hanya boleh menambahkan role siswa.');",
      "        }",
      "",
      "        \\$user = User::create([",
      "            'name' => \\$request->name,",
      "            'email' => \\$request->email,",
      "            'role' => \\$request->role,",
      "            'password' => Hash::make(\\$request->password),",
      "        ]);",
      "",
      "        if (\\$user) {",
      "            return redirect()->route('home')->with('status', \"Menambahkan user berhasil\");",
      "        }",
      "",
      "        return redirect()->back()->with('status', \"Menambahkan user gagal\");",
      "    }",
      "",
      "    public function edit(User \\$user)",
      "    {",
      "        return view(\"admin.edit-user\", compact(\"user\"));",
      "    }",
      "",
      "    public function update(Request \\$request, User \\$user)",
      "    {",
      "        \\$request->validate([",
      "            'name' => 'required|string|max:100',",
      "            'email' => 'required|email|unique:users,email,' . \\$user->id,",
      "            'password' => 'nullable|confirmed|min:6',",
      "        ]);",
      "",
      "        \\$data = [",
      "            'name' => \\$request->name,",
      "            'email' => \\$request->email,",
      "        ];",
      "",
      "        if (\\$request->filled('password')) {",
      "            \\$data['password'] = Hash::make(\\$request->password);",
      "        }",
      "",
      "        \\$updated = \\$user->update(\\$data);",
      "",
      "        if (\\$updated) {",
      "            return redirect()->route('home')->with(\"status\", \"Update Berhasil\");",
      "        }",
      "",
      "        return redirect()->back()->with(\"status\", \"Update gagal\");",
      "    }",
      "",
      "    public function destroy(User \\$user)",
      "    {",
      "        \\$deleted = \\$user->delete();",
      "",
      "        if (\\$deleted) {",
      "            return redirect()->route('home')->with(\"status\", \"Hapus user berhasil\");",
      "        }",
      "",
      "        return redirect()->back()->with(\"status\", \"Hapus user gagal\");",
      "    }",
      "}",
      ""
    ],
    "description": "usercto"
  },
  "loginct": {
    "prefix": [
      "loginct"
    ],
    "body": [
      "<?php",
      "",
      "namespace App\\Http\\Controllers\\Auth;",
      "",
      "use App\\Http\\Controllers\\Controller;",
      "use Illuminate\\Http\\Request;",
      "use Illuminate\\Support\\Facades\\Auth;",
      "use Illuminate\\Foundation\\Auth\\AuthenticatesUsers;",
      "class LoginController extends Controller",
      "{",
      "    use AuthenticatesUsers;",
      "",
      "    ",
      "    public function showLoginForm()",
      "    {",
      "        return view('login');  ",
      "    }",
      "",
      "    protected \\$redirectTo = '/home';",
      "",
      "    public function __construct()",
      "    {",
      "        \\$this->middleware('guest')->except('logout');",
      "    }",
      "",
      "    public function logout(Request \\$request)",
      "    {",
      "        Auth::logout();",
      "        \\$request->session()->invalidate();",
      "        \\$request->session()->regenerateToken();",
      "        ",
      "        return redirect('/');  ",
      "    }",
      "}",
      ""
    ],
    "description": "loginct"
  },
  "webct": {
    "prefix": [
      "webct"
    ],
    "body": [
      "<?php",
      "",
      "use App\\\\Http\\\\Controllers\\\\DompetController;",
      "use Illuminate\\\\Support\\\\Facades\\\\Auth;",
      "use Illuminate\\\\Support\\\\Facades\\\\Route;",
      "use App\\\\Http\\\\Controllers\\\\HomeController;",
      "use App\\\\Http\\\\Controllers\\\\UserController;",
      "",
      "",
      "// Home Route",
      "Route::get('/', function () {",
      "    return view('login');",
      "});",
      "",
      "Auth::routes(); // Rute autentikasi otomatis",
      "",
      "// Rute untuk dashboard",
      "Route::get('/home', [HomeController::class, 'index'])->middleware('auth');",
      "Route::get('/home', [HomeController::class, 'index'])->name('home');",
      "",
      "// CRUD User    ",
      "Route::resource('user', UserController::class);",
      "",
      "// Rute untuk wallet",
      "Route::post('/topUp', [DompetController::class, 'topup'])->name('topUp');",
      "Route::post('/acceptRequest', [DompetController::class, 'acceptRequest'])->name('acceptRequest');",
      "Route::post('/withdraw', [DompetController::class, 'withdraw'])->name('withdraw');",
      "Route::post('/transfer', [DompetController::class, 'transfer'])->name('transfer');",
      "",
      "",
      "",
      "Route::post('/approve/{dompet}', [DompetController::class, 'acceptRequest'])",
      "    ->name('approve')",
      "    ->middleware('role:bank'); // Middleware role untuk pengguna 'bank'",
      "",
      "Route::post('/reject/{dompet}', [DompetController::class, 'rejectRequest'])",
      "    ->name('reject')",
      "    ->middleware('role:bank'); // Middleware role untuk pengguna 'bank'",
      "",
      "",
      "",
      "Route::get('/all-transaction', [DompetController::class, 'all'])->name('wallet.all');",
      "Route::get('/get-user-info/{id}', [App\\\\Http\\\\Controllers\\\\UserController::class, 'getUserInfo']);",
      "",
      "Route::post('/bank/topup', [DompetController::class, 'bankTopupToSiswa'])->name('bank.topup');",
      "Route::post('/bank/withdraw', [DompetController::class, 'bankWithdrawFromSiswa'])->name('bank.withdraw');",
      "",
      "Route::get('/wallet/export-pdf{userId?}', [DompetController::class, 'exportPDF'])->name('export.pdf');",
      ""
    ],
    "description": "webct"
  },
  "dompetmg": {
    "prefix": [
      "dompetmg"
    ],
    "body": [
      "<?php",
      "",
      "use Illuminate\\Database\\Migrations\\Migration;",
      "use Illuminate\\Database\\Schema\\Blueprint;",
      "use Illuminate\\Support\\Facades\\Schema;",
      "",
      "return new class extends Migration",
      "{",
      "    /**",
      "     * Run the migrations.",
      "     */",
      "    public function up(): void",
      "    {",
      "        Schema::create('dompets', function (Blueprint \\$table) {",
      "            \\$table->id();",
      "            \\$table->foreignId('user_id')->constrained()->onDelete('cascade');",
      "            \\$table->double('credit', 10, 2)->nullable();",
      "            \\$table->double('debit', 10, 2)->nullable();",
      "            \\$table->text('description');",
      "            \\$table->enum('status',[\"process\",\"done\",\"rejected\"])->default(\"done\");",
      "            \\$table->timestamps();",
      "        });",
      "    }",
      "",
      "    /**",
      "     * Reverse the migrations.",
      "     */",
      "    public function down(): void",
      "    {",
      "        Schema::dropIfExists('dompets');",
      "    }",
      "};",
      ""
    ],
    "description": "dompetmg"
  },
  "usermg": {
    "prefix": [
      "usermg"
    ],
    "body": [
      "<?php",
      "",
      "use Illuminate\\Database\\Migrations\\Migration;",
      "use Illuminate\\Database\\Schema\\Blueprint;",
      "use Illuminate\\Support\\Facades\\Schema;",
      "",
      "return new class extends Migration",
      "{",
      "    /**",
      "     * Run the migrations.",
      "     */",
      "    public function up(): void",
      "    {",
      "        Schema::create('users', function (Blueprint \\$table) {",
      "            \\$table->id();",
      "            \\$table->string('name');",
      "            \\$table->string('email')->unique();",
      "            \\$table->enum('role',[\"admin\",\"siswa\",\"bank\"])->default(\"admin\");",
      "            \\$table->timestamp('email_verified_at')->nullable();",
      "            \\$table->string('password');",
      "            \\$table->rememberToken();",
      "            \\$table->timestamps();",
      "        });",
      "    }",
      "",
      "    /**",
      "     * Reverse the migrations.",
      "     */",
      "    public function down(): void",
      "    {",
      "        Schema::dropIfExists('users');",
      "    }",
      "};",
      ""
    ],
    "description": "usermg"
  },
  "dompetmdl": {
    "prefix": [
      "dompetmdl"
    ],
    "body": [
      "<?php",
      "",
      "namespace App\\Models;",
      "",
      "use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;",
      "use Illuminate\\Database\\Eloquent\\Model;",
      "",
      "class Dompet extends Model",
      "{",
      "    use HasFactory;",
      "    protected \\$fillable = [",
      "        'user_id',",
      "        'debit',",
      "        'credit',",
      "        'description',",
      "        'status',",
      "    ];",
      "",
      "    public function user(){",
      "        return \\$this->belongsTo(User::class);",
      "    }",
      "}",
      ""
    ],
    "description": "dompetmdl"
  },
  "rolemdr": {
    "prefix": [
      "rolemdr"
    ],
    "body": [
      "<?php",
      "",
      "namespace App\\Http\\Middleware;",
      "",
      "use Closure;",
      "use Illuminate\\Http\\Request;",
      "use Illuminate\\Support\\Facades\\Auth;",
      "",
      "class RoleMiddleware",
      "{",
      "    /**",
      "     * Handle an incoming request.",
      "     *",
      "     * @param  \\Illuminate\\Http\\Request  \\$request",
      "     * @param  \\Closure  \\$next",
      "     * @param  string  ...\\$roles",
      "     * @return \\Illuminate\\Http\\Response|\\Illuminate\\Http\\RedirectResponse",
      "     */",
      "    public function handle(Request \\$request, Closure \\$next, ...\\$roles)",
      "    {",
      "        \\$user = Auth::user();",
      "",
      "        if (!\\$user) {",
      "            return redirect()->route('login')->with('status', 'Please log in to access this page.');",
      "        }",
      "",
      "        if (!in_array(\\$user->role, \\$roles)) {",
      "            return redirect()->route('home')->with('status', 'You do not have permission to access this page.');",
      "        }",
      "",
      "        return \\$next(\\$request);",
      "    }",
      "}"
    ],
    "description": "rolemdr"
  },
  "seederct": {
    "prefix": [
      "seederct"
    ],
    "body": [
      "<?php",
      "",
      "namespace Database\\\\Seeders;",
      "",
      "// use Illuminate\\\\Database\\\\Console\\\\Seeds\\\\WithoutModelEvents;",
      "use Illuminate\\\\Database\\\\Seeder;",
      "",
      "class DatabaseSeeder extends Seeder",
      "{",
      "    /**",
      "     * Seed the application's database.",
      "     */",
      "    public function run(): void",
      "    {",
      "        \\\\App\\\\Models\\\\User::factory()->create([",
      "            'name' => 'liqquel admin',",
      "            'role'=> 'admin',",
      "            'email' => 'admin@example.com',",
      "            'password'=> bcrypt('admin@example.com'),",
      "            ",
      "        ]);",
      "",
      "        \\\\App\\\\Models\\\\User::factory()->create([",
      "            'name' => 'liqquel',",
      "            'role'=> 'siswa',",
      "            'email' => 'siswa@siswa.com',",
      "            'password'=> bcrypt('siswa@siswa.com'),",
      "            ",
      "        ]);",
      "",
      "        \\\\App\\\\Models\\\\User::factory()->create([",
      "            'name' => 'liqquel bank',",
      "            'role'=> 'bank',",
      "            'email' => 'bank@gmail.com',",
      "            'password'=> bcrypt('bank@gmail.com'),",
      "            ",
      "        ]);",
      "",
      "        \\\\App\\\\Models\\\\User::factory()->create([",
      "            'name' => 'siswa1',",
      "            'role'=> 'siswa',",
      "            'email' => 'siswa1@Gmail.com',",
      "            'password'=> bcrypt('siswa1@Gmail.com'),",
      "            ",
      "        ]);",
      "}",
      "}",
      ""
    ],
    "description": "seederct"
  }
  
}